version:  '3.7'
services: 
  db:
    image: 'postgres:alpine'
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes: 
      - ./project_db/localdb/datadir:/var/lib/postgresql/data
      - ./project_db/initscrpts/dbcreations-with-migrations-runsOnce/init-scripts:/docker-entrypoint-initdb.d
      - ./project_db/initscrpts/dbcreations-with-migrations-runsOnce/migrations/sqls/up:/migrations
    ports: 
      - '${EXTERNALPGPORT}:${PGPORT}'
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 10s
      retries: 5
  redis:
    image: 'redis:alpine'
  api: 
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    volumes: 
      - /app/node_modules
      - ./server:/app
    environment: 
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - PGHOST=db
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - PGPORT=${PGPORT}
  worker:
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes: 
      - /app/node_modules
      - ./worker:/app
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
  client:
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes: 
      - /app/node_modules
      - ./client:/app
  nginx:
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    ports: 
      - '${EXTERNALWEBPORT}:80'